// ASP.NET WIKIPEDIA


#Introduction


ASP.NET is an open-source[2] server-side Web application framework designed for Web development to produce dynamic Web pages. It was developed by Microsoft to allow programmers to build dynamic web sites, web applications and web services.

it is the successor to Microsoft's the .NET Framework, and is the successor to Microsoft's Active Server Pages(ASP) technology.

The ASP.NET SOAP extension framework allows ASP.NET components to process SOAP messages.

ASP.NET is in the process of being re-implemented as a modern and modular web framework, together with other frameworks like Entity Framework. The new framework will make use of the new open-source .NET Compiler Platform (code-name "Roslyn") and be cross platform. ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages (a platform using only Razor pages) will merge into a unified MVC 6.[1] The project is called "ASP.NET vNext".


# Characterstrics

ASP.NET Web pages, known officially as Web Forms,[4] are the main building blocks for application development in ASP.NET.[5] There are two basic methodologies for Web Forms, a web application format and a web site format. [2].

Web applications need to be compiled before deployment, while web sites structures allows the user to copy the files directly to the server without prior compilation. Web forms are contained in files with a ".aspx" extension; these files typically contain static (X)HTML markup or component markup.

The component markup can include server-side Web Controls and User Controls that have been defined in the framework or the web page. For example, there is a textbox component which can be defined on a page as <asp:textbox id='myid' runat='server'> which will be rendered into a html input box.

Additionally, dynamic code, which runs on the server, can be placed in a page within a block <% -- dynamic code -- %>, which is similar to other Web development technologies such as PHP, JSP, and ASP. With ASP.NET Framework 2.0, Microsoft introduced a new code-behind model which allows static text to remain on the .aspx page, while dynamic code remains in an .aspx.vb or .aspx.cs or .aspx.fs file (depending on the programming language used)


# Code Behiind Model

in the web application format, the pagename.aspx.cs is partial class that is linked to the pagename.designer.cs file. The designer file is a file that is autogenerated from the aspx page that allows the programmer to reference components in the aspx page from the cs page without having to declare them manually as in versions prior to Asp.Net version 2.[3] When using this style of programming, the developer writes code to respond to different events, like the page being loaded, or a control being clicked, rather than a procedural walkthrough of the document.


# Directives

<!-- Web.Config CFile -->

<configuration>
	<system.web>
		<customErrors mode = "On"/>
	</system.web>
</configuration>


Application

Application state is held by a collection of shared user-defined variables. These are set and initialized when the Application_OnStart event fires on the loading of the first instance of the application and are available until the last instance exits. Application state variables are accessed using the Applications collection, which provides a wrapper for the application state. Application state variables are identified by name.[8] Application is state management


Session state

Server-side session state is held by a collection of user-defined session variables that are persistent during a user session. These Variables accessed usiung the session collections, are unique to each session instance.

These variables can be set to be automatically destroyed after a defined time of inactivity even if the session does not end.
Client-side user session is maintained by either a cookie or by encoding the session_id in the url itself

ASP.NET supports three modes of persistence for server-side session variables

##In Process Mode
##State Server Mode
##SQL Server Mode
	State variables are stored in a database, allowing session variablesto be persisted across ASP.NET process shutdowns. The main advantage of this mode is that it allows the application to balance load on a server cluster, sharing session between servers. This is the slowest method of session state management in ASP.NET

ASP.NET session state enables you to store and retrieve values for a user as the user navigates ASP.NET pages in a Web application. HTTP is a stateless protocol. This means that a Web server treats each HTTP request for a page as an independent request. The server retains no knowledge of variable values that were used during previous requests. ASP.NET session state identifies requests from the same browser during a limited time window as a session, and provides a way to persist variable values for the duration of that session. By default, ASP.NET session state is enabled for all ASP.NET applications.	
